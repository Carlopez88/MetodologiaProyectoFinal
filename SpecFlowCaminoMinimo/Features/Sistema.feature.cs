// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowCaminoMinimo.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SistemaFeature : object, Xunit.IClassFixture<SistemaFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Sistema.feature"
#line hidden
        
        public SistemaFeature(SistemaFeature.FixtureData fixtureData, SpecFlowCaminoMinimo_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Sistema", "\tCalcular la ruta más rápida o el camino más óptimo que tarda trasladarse de un p" +
                    "unto A a un punto B en el mapa", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 10
#line hidden
#line 11
  testRunner.Given("el usuario seleccione como punto de partida Estación_Policía", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
  testRunner.And("el usuario seleccione como punto de llegada Supermercado_Lina", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "NdInicial",
                        "NdDestino",
                        "Valor"});
            table1.AddRow(new string[] {
                        "Café_Rocher",
                        "Casa_Paul",
                        "5"});
            table1.AddRow(new string[] {
                        "Café_Rocher",
                        "Casa_Port",
                        "6"});
            table1.AddRow(new string[] {
                        "Casa_Paul",
                        "Café_Rocher",
                        "5"});
            table1.AddRow(new string[] {
                        "Casa_Paul",
                        "Casa_Blanca",
                        "3"});
            table1.AddRow(new string[] {
                        "Casa_Paul",
                        "Estación_Policía",
                        "6"});
            table1.AddRow(new string[] {
                        "Casa_Blanca",
                        "Casa_Paul",
                        "3"});
            table1.AddRow(new string[] {
                        "Casa_Blanca",
                        "Casa_Linda",
                        "3"});
            table1.AddRow(new string[] {
                        "Casa_Blanca",
                        "Banco_Ayuda",
                        "4"});
            table1.AddRow(new string[] {
                        "Supermercado_Lina",
                        "Banco_Ayuda",
                        "8"});
            table1.AddRow(new string[] {
                        "Supermercado_Lina",
                        "CComercial_Shean",
                        "7"});
            table1.AddRow(new string[] {
                        "Casa_Linda",
                        "Casa_Blanca",
                        "3"});
            table1.AddRow(new string[] {
                        "Banco_Ayuda",
                        "Casa_Blanca",
                        "4"});
            table1.AddRow(new string[] {
                        "Banco_Ayuda",
                        "Supermercado_Lina",
                        "8"});
            table1.AddRow(new string[] {
                        "Banco_Ayuda",
                        "CComercial_Shean",
                        "10"});
            table1.AddRow(new string[] {
                        "Banco_Ayuda",
                        "Casa_Del_Sol",
                        "6"});
            table1.AddRow(new string[] {
                        "Banco_Ayuda",
                        "Estación_Policía",
                        "6"});
            table1.AddRow(new string[] {
                        "Hacienda_Frank",
                        "CComercial_Shean",
                        "5"});
            table1.AddRow(new string[] {
                        "CComercial_Shean",
                        "Supermercado_Lina",
                        "7"});
            table1.AddRow(new string[] {
                        "CComercial_Shean",
                        "Banco_Ayuda",
                        "10"});
            table1.AddRow(new string[] {
                        "CComercial_Shean",
                        "Hacienda_Frank",
                        "5"});
            table1.AddRow(new string[] {
                        "Casa_Del_Sol",
                        "Banco_Ayuda",
                        "6"});
            table1.AddRow(new string[] {
                        "Casa_Del_Sol",
                        "Tronchatoro",
                        "3"});
            table1.AddRow(new string[] {
                        "Casa_Del_Sol",
                        "Estación_Policía",
                        "8"});
            table1.AddRow(new string[] {
                        "Tronchatoro",
                        "Casa_Del_Sol",
                        "3"});
            table1.AddRow(new string[] {
                        "Tronchatoro",
                        "Estación_Policía",
                        "4"});
            table1.AddRow(new string[] {
                        "Estación_Policía",
                        "Casa_Paul",
                        "6"});
            table1.AddRow(new string[] {
                        "Estación_Policía",
                        "Banco_Ayuda",
                        "6"});
            table1.AddRow(new string[] {
                        "Estación_Policía",
                        "Casa_Del_Sol",
                        "8"});
            table1.AddRow(new string[] {
                        "Estación_Policía",
                        "Tronchatoro",
                        "4"});
            table1.AddRow(new string[] {
                        "Estación_Policía",
                        "Casa_Port",
                        "5"});
            table1.AddRow(new string[] {
                        "Casa_Port",
                        "Café_Rocher",
                        "6"});
            table1.AddRow(new string[] {
                        "Casa_Port",
                        "Estación_Policía",
                        "5"});
            table1.AddRow(new string[] {
                        "Casa_Port",
                        "Casa_Embrujada",
                        "1"});
            table1.AddRow(new string[] {
                        "Casa_Embrujada",
                        "Casa_Port",
                        "1"});
#line 13
  testRunner.And("el usuario ingresa el esfuerzo para cada arista", ((string)(null)), table1, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calcular esfuerzo total resultante del camino mínimo")]
        [Xunit.TraitAttribute("FeatureTitle", "Sistema")]
        [Xunit.TraitAttribute("Description", "Calcular esfuerzo total resultante del camino mínimo")]
        public virtual void CalcularEsfuerzoTotalResultanteDelCaminoMinimo()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calcular esfuerzo total resultante del camino mínimo", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
this.FeatureBackground();
#line hidden
#line 51
  testRunner.When("El usuario seleccione el botón Camino Mínimo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
  testRunner.Then("el sistema muestra como resultado del esfuerzo total del camino mínimo 14", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SistemaFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SistemaFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
